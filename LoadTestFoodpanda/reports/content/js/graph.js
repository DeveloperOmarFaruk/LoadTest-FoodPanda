/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 605.0, "minX": 0.0, "maxY": 100695.0, "series": [{"data": [[0.0, 605.0], [0.1, 605.0], [0.2, 699.0], [0.3, 1007.0], [0.4, 1117.0], [0.5, 1117.0], [0.6, 1286.0], [0.7, 1397.0], [0.8, 1508.0], [0.9, 1508.0], [1.0, 1623.0], [1.1, 1737.0], [1.2, 1769.0], [1.3, 1769.0], [1.4, 1863.0], [1.5, 1884.0], [1.6, 1908.0], [1.7, 1908.0], [1.8, 1914.0], [1.9, 1934.0], [2.0, 1942.0], [2.1, 1942.0], [2.2, 2110.0], [2.3, 2184.0], [2.4, 2264.0], [2.5, 2264.0], [2.6, 2350.0], [2.7, 2442.0], [2.8, 2459.0], [2.9, 2459.0], [3.0, 2467.0], [3.1, 2530.0], [3.2, 2650.0], [3.3, 2650.0], [3.4, 2765.0], [3.5, 2915.0], [3.6, 2915.0], [3.7, 2915.0], [3.8, 2980.0], [3.9, 3162.0], [4.0, 3208.0], [4.1, 3208.0], [4.2, 3227.0], [4.3, 3249.0], [4.4, 3256.0], [4.5, 3256.0], [4.6, 3285.0], [4.7, 3285.0], [4.8, 3285.0], [4.9, 3309.0], [5.0, 3374.0], [5.1, 3566.0], [5.2, 3566.0], [5.3, 3656.0], [5.4, 3676.0], [5.5, 3714.0], [5.6, 3714.0], [5.7, 3774.0], [5.8, 3778.0], [5.9, 3810.0], [6.0, 3810.0], [6.1, 3864.0], [6.2, 3872.0], [6.3, 3925.0], [6.4, 3925.0], [6.5, 3972.0], [6.6, 3976.0], [6.7, 4066.0], [6.8, 4066.0], [6.9, 4096.0], [7.0, 4097.0], [7.1, 4103.0], [7.2, 4103.0], [7.3, 4108.0], [7.4, 4110.0], [7.5, 4111.0], [7.6, 4111.0], [7.7, 4112.0], [7.8, 4145.0], [7.9, 4149.0], [8.0, 4149.0], [8.1, 4154.0], [8.2, 4155.0], [8.3, 4176.0], [8.4, 4176.0], [8.5, 4181.0], [8.6, 4181.0], [8.7, 4187.0], [8.8, 4187.0], [8.9, 4187.0], [9.0, 4188.0], [9.1, 4222.0], [9.2, 4222.0], [9.3, 4224.0], [9.4, 4230.0], [9.5, 4254.0], [9.6, 4254.0], [9.7, 4255.0], [9.8, 4257.0], [9.9, 4257.0], [10.0, 4257.0], [10.1, 4261.0], [10.2, 4261.0], [10.3, 4282.0], [10.4, 4282.0], [10.5, 4286.0], [10.6, 4291.0], [10.7, 4297.0], [10.8, 4297.0], [10.9, 4306.0], [11.0, 4335.0], [11.1, 4338.0], [11.2, 4338.0], [11.3, 4347.0], [11.4, 4352.0], [11.5, 4354.0], [11.6, 4354.0], [11.7, 4355.0], [11.8, 4365.0], [11.9, 4368.0], [12.0, 4368.0], [12.1, 4390.0], [12.2, 4394.0], [12.3, 4398.0], [12.4, 4398.0], [12.5, 4418.0], [12.6, 4436.0], [12.7, 4455.0], [12.8, 4471.0], [12.9, 4471.0], [13.0, 4487.0], [13.1, 4490.0], [13.2, 4606.0], [13.3, 4606.0], [13.4, 4698.0], [13.5, 4767.0], [13.6, 4769.0], [13.7, 4769.0], [13.8, 4797.0], [13.9, 4809.0], [14.0, 4810.0], [14.1, 4810.0], [14.2, 4866.0], [14.3, 4938.0], [14.4, 5011.0], [14.5, 5011.0], [14.6, 5039.0], [14.7, 5043.0], [14.8, 5048.0], [14.9, 5048.0], [15.0, 5069.0], [15.1, 5428.0], [15.2, 5506.0], [15.3, 5506.0], [15.4, 5535.0], [15.5, 5619.0], [15.6, 5711.0], [15.7, 5711.0], [15.8, 5711.0], [15.9, 5715.0], [16.0, 5990.0], [16.1, 5990.0], [16.2, 6095.0], [16.3, 6344.0], [16.4, 6375.0], [16.5, 6375.0], [16.6, 6463.0], [16.7, 6527.0], [16.8, 6531.0], [16.9, 6531.0], [17.0, 6550.0], [17.1, 6764.0], [17.2, 6866.0], [17.3, 6866.0], [17.4, 6934.0], [17.5, 6967.0], [17.6, 6975.0], [17.7, 6975.0], [17.8, 7106.0], [17.9, 7128.0], [18.0, 7191.0], [18.1, 7191.0], [18.2, 7235.0], [18.3, 7276.0], [18.4, 7298.0], [18.5, 7298.0], [18.6, 7312.0], [18.7, 7443.0], [18.8, 7445.0], [18.9, 7445.0], [19.0, 7459.0], [19.1, 7464.0], [19.2, 7474.0], [19.3, 7474.0], [19.4, 7475.0], [19.5, 7479.0], [19.6, 7531.0], [19.7, 7531.0], [19.8, 7616.0], [19.9, 7643.0], [20.0, 7669.0], [20.1, 7669.0], [20.2, 7697.0], [20.3, 7721.0], [20.4, 7725.0], [20.5, 7725.0], [20.6, 7726.0], [20.7, 7731.0], [20.8, 7736.0], [20.9, 7736.0], [21.0, 7746.0], [21.1, 7758.0], [21.2, 7768.0], [21.3, 7768.0], [21.4, 7780.0], [21.5, 7784.0], [21.6, 7799.0], [21.7, 7799.0], [21.8, 7814.0], [21.9, 7853.0], [22.0, 7857.0], [22.1, 7857.0], [22.2, 7862.0], [22.3, 7885.0], [22.4, 7896.0], [22.5, 7896.0], [22.6, 7898.0], [22.7, 7900.0], [22.8, 7919.0], [22.9, 7919.0], [23.0, 7921.0], [23.1, 7921.0], [23.2, 7928.0], [23.3, 7928.0], [23.4, 7928.0], [23.5, 7931.0], [23.6, 7942.0], [23.7, 7942.0], [23.8, 7961.0], [23.9, 7968.0], [24.0, 7968.0], [24.1, 7968.0], [24.2, 7970.0], [24.3, 7972.0], [24.4, 7978.0], [24.5, 7978.0], [24.6, 7988.0], [24.7, 7990.0], [24.8, 8030.0], [24.9, 8030.0], [25.0, 8035.0], [25.1, 8044.0], [25.2, 8053.0], [25.3, 8053.0], [25.4, 8058.0], [25.5, 8069.0], [25.6, 8073.0], [25.7, 8073.0], [25.8, 8094.0], [25.9, 8127.0], [26.0, 8167.0], [26.1, 8167.0], [26.2, 8171.0], [26.3, 8222.0], [26.4, 8259.0], [26.5, 8259.0], [26.6, 8272.0], [26.7, 8290.0], [26.8, 8342.0], [26.9, 8342.0], [27.0, 8344.0], [27.1, 8407.0], [27.2, 8443.0], [27.3, 8443.0], [27.4, 8465.0], [27.5, 8476.0], [27.6, 8476.0], [27.7, 8476.0], [27.8, 8477.0], [27.9, 8505.0], [28.0, 8516.0], [28.1, 8516.0], [28.2, 8517.0], [28.3, 8583.0], [28.4, 8674.0], [28.5, 8674.0], [28.6, 8923.0], [28.7, 8978.0], [28.8, 9063.0], [28.9, 9063.0], [29.0, 9169.0], [29.1, 9206.0], [29.2, 9208.0], [29.3, 9208.0], [29.4, 9220.0], [29.5, 9268.0], [29.6, 9277.0], [29.7, 9277.0], [29.8, 9320.0], [29.9, 9349.0], [30.0, 9421.0], [30.1, 9421.0], [30.2, 9546.0], [30.3, 9614.0], [30.4, 9636.0], [30.5, 9636.0], [30.6, 9834.0], [30.7, 9991.0], [30.8, 10011.0], [30.9, 10011.0], [31.0, 10125.0], [31.1, 10277.0], [31.2, 10387.0], [31.3, 10387.0], [31.4, 10393.0], [31.5, 10409.0], [31.6, 10488.0], [31.7, 10488.0], [31.8, 10500.0], [31.9, 10510.0], [32.0, 10511.0], [32.1, 10511.0], [32.2, 10536.0], [32.3, 10543.0], [32.4, 10552.0], [32.5, 10552.0], [32.6, 10564.0], [32.7, 10582.0], [32.8, 10703.0], [32.9, 10703.0], [33.0, 10718.0], [33.1, 10725.0], [33.2, 10734.0], [33.3, 10734.0], [33.4, 10762.0], [33.5, 10767.0], [33.6, 10797.0], [33.7, 10797.0], [33.8, 10812.0], [33.9, 10815.0], [34.0, 10845.0], [34.1, 10845.0], [34.2, 10876.0], [34.3, 10963.0], [34.4, 10977.0], [34.5, 10977.0], [34.6, 11080.0], [34.7, 11136.0], [34.8, 11329.0], [34.9, 11329.0], [35.0, 11388.0], [35.1, 11422.0], [35.2, 11423.0], [35.3, 11423.0], [35.4, 11426.0], [35.5, 11433.0], [35.6, 11464.0], [35.7, 11464.0], [35.8, 11489.0], [35.9, 11503.0], [36.0, 11526.0], [36.1, 11526.0], [36.2, 11545.0], [36.3, 11578.0], [36.4, 11616.0], [36.5, 11616.0], [36.6, 11620.0], [36.7, 11677.0], [36.8, 11687.0], [36.9, 11687.0], [37.0, 11702.0], [37.1, 11757.0], [37.2, 11763.0], [37.3, 11763.0], [37.4, 11768.0], [37.5, 11833.0], [37.6, 11835.0], [37.7, 11835.0], [37.8, 11863.0], [37.9, 11939.0], [38.0, 12029.0], [38.1, 12029.0], [38.2, 12085.0], [38.3, 12125.0], [38.4, 12223.0], [38.5, 12223.0], [38.6, 12302.0], [38.7, 12375.0], [38.8, 12388.0], [38.9, 12388.0], [39.0, 12395.0], [39.1, 12416.0], [39.2, 12421.0], [39.3, 12421.0], [39.4, 12450.0], [39.5, 12479.0], [39.6, 12560.0], [39.7, 12560.0], [39.8, 12645.0], [39.9, 12679.0], [40.0, 12721.0], [40.1, 12721.0], [40.2, 12735.0], [40.3, 12863.0], [40.4, 12915.0], [40.5, 12915.0], [40.6, 12940.0], [40.7, 13031.0], [40.8, 13250.0], [40.9, 13250.0], [41.0, 13252.0], [41.1, 13407.0], [41.2, 13667.0], [41.3, 13667.0], [41.4, 13672.0], [41.5, 13694.0], [41.6, 13778.0], [41.7, 13778.0], [41.8, 13809.0], [41.9, 13823.0], [42.0, 13860.0], [42.1, 13860.0], [42.2, 14153.0], [42.3, 14280.0], [42.4, 14408.0], [42.5, 14408.0], [42.6, 14478.0], [42.7, 14502.0], [42.8, 14916.0], [42.9, 14916.0], [43.0, 14986.0], [43.1, 15027.0], [43.2, 15057.0], [43.3, 15057.0], [43.4, 15098.0], [43.5, 15107.0], [43.6, 15110.0], [43.7, 15110.0], [43.8, 15138.0], [43.9, 15142.0], [44.0, 15152.0], [44.1, 15152.0], [44.2, 15171.0], [44.3, 15173.0], [44.4, 15217.0], [44.5, 15217.0], [44.6, 15217.0], [44.7, 15234.0], [44.8, 15313.0], [44.9, 15313.0], [45.0, 15313.0], [45.1, 15326.0], [45.2, 15366.0], [45.3, 15366.0], [45.4, 15370.0], [45.5, 15370.0], [45.6, 15424.0], [45.7, 15424.0], [45.8, 15424.0], [45.9, 15427.0], [46.0, 15647.0], [46.1, 15647.0], [46.2, 15674.0], [46.3, 15772.0], [46.4, 15807.0], [46.5, 15807.0], [46.6, 15855.0], [46.7, 15860.0], [46.8, 15886.0], [46.9, 15886.0], [47.0, 15888.0], [47.1, 15955.0], [47.2, 16094.0], [47.3, 16094.0], [47.4, 16230.0], [47.5, 16307.0], [47.6, 16469.0], [47.7, 16469.0], [47.8, 16524.0], [47.9, 16580.0], [48.0, 16708.0], [48.1, 16708.0], [48.2, 16708.0], [48.3, 16717.0], [48.4, 16951.0], [48.5, 16951.0], [48.6, 17046.0], [48.7, 17173.0], [48.8, 17174.0], [48.9, 17174.0], [49.0, 17183.0], [49.1, 17191.0], [49.2, 17201.0], [49.3, 17201.0], [49.4, 17349.0], [49.5, 17362.0], [49.6, 17381.0], [49.7, 17381.0], [49.8, 17514.0], [49.9, 17549.0], [50.0, 17819.0], [50.1, 17819.0], [50.2, 17864.0], [50.3, 18551.0], [50.4, 18569.0], [50.5, 18569.0], [50.6, 18603.0], [50.7, 18624.0], [50.8, 18651.0], [50.9, 18651.0], [51.0, 18681.0], [51.1, 18779.0], [51.2, 18874.0], [51.3, 18874.0], [51.4, 18876.0], [51.5, 18919.0], [51.6, 19023.0], [51.7, 19023.0], [51.8, 19292.0], [51.9, 19293.0], [52.0, 19495.0], [52.1, 19495.0], [52.2, 19683.0], [52.3, 19731.0], [52.4, 19743.0], [52.5, 19743.0], [52.6, 19776.0], [52.7, 19852.0], [52.8, 19883.0], [52.9, 19883.0], [53.0, 20141.0], [53.1, 20148.0], [53.2, 20205.0], [53.3, 20205.0], [53.4, 20217.0], [53.5, 20228.0], [53.6, 20274.0], [53.7, 20274.0], [53.8, 20422.0], [53.9, 20628.0], [54.0, 20693.0], [54.1, 20693.0], [54.2, 21061.0], [54.3, 21128.0], [54.4, 21129.0], [54.5, 21129.0], [54.6, 21322.0], [54.7, 21479.0], [54.8, 21517.0], [54.9, 21517.0], [55.0, 21868.0], [55.1, 21886.0], [55.2, 21895.0], [55.3, 21895.0], [55.4, 21967.0], [55.5, 22274.0], [55.6, 22328.0], [55.7, 22328.0], [55.8, 22377.0], [55.9, 22386.0], [56.0, 22492.0], [56.1, 22492.0], [56.2, 22567.0], [56.3, 22576.0], [56.4, 22611.0], [56.5, 22611.0], [56.6, 22690.0], [56.7, 22841.0], [56.8, 23025.0], [56.9, 23025.0], [57.0, 23055.0], [57.1, 23100.0], [57.2, 23116.0], [57.3, 23116.0], [57.4, 23126.0], [57.5, 23190.0], [57.6, 23234.0], [57.7, 23234.0], [57.8, 23293.0], [57.9, 23386.0], [58.0, 23442.0], [58.1, 23442.0], [58.2, 23520.0], [58.3, 23575.0], [58.4, 23800.0], [58.5, 23800.0], [58.6, 23925.0], [58.7, 24237.0], [58.8, 24323.0], [58.9, 24323.0], [59.0, 24391.0], [59.1, 24414.0], [59.2, 24654.0], [59.3, 24654.0], [59.4, 24943.0], [59.5, 25127.0], [59.6, 25202.0], [59.7, 25202.0], [59.8, 25293.0], [59.9, 25317.0], [60.0, 25728.0], [60.1, 25728.0], [60.2, 25747.0], [60.3, 25790.0], [60.4, 25909.0], [60.5, 25909.0], [60.6, 25937.0], [60.7, 25940.0], [60.8, 25953.0], [60.9, 25953.0], [61.0, 25995.0], [61.1, 25997.0], [61.2, 26001.0], [61.3, 26001.0], [61.4, 26207.0], [61.5, 26478.0], [61.6, 26561.0], [61.7, 26561.0], [61.8, 26627.0], [61.9, 26651.0], [62.0, 26712.0], [62.1, 26712.0], [62.2, 26758.0], [62.3, 26820.0], [62.4, 26837.0], [62.5, 26837.0], [62.6, 26847.0], [62.7, 27439.0], [62.8, 27452.0], [62.9, 27452.0], [63.0, 27492.0], [63.1, 27638.0], [63.2, 27724.0], [63.3, 27724.0], [63.4, 27743.0], [63.5, 28074.0], [63.6, 28142.0], [63.7, 28142.0], [63.8, 28170.0], [63.9, 28306.0], [64.0, 28327.0], [64.1, 28327.0], [64.2, 28501.0], [64.3, 28529.0], [64.4, 28751.0], [64.5, 28751.0], [64.6, 28838.0], [64.7, 28864.0], [64.8, 28939.0], [64.9, 28939.0], [65.0, 29073.0], [65.1, 29167.0], [65.2, 29169.0], [65.3, 29169.0], [65.4, 29604.0], [65.5, 29606.0], [65.6, 29645.0], [65.7, 29645.0], [65.8, 29705.0], [65.9, 29810.0], [66.0, 29901.0], [66.1, 29901.0], [66.2, 29965.0], [66.3, 30004.0], [66.4, 30238.0], [66.5, 30238.0], [66.6, 30264.0], [66.7, 30355.0], [66.8, 30362.0], [66.9, 30362.0], [67.0, 30429.0], [67.1, 30436.0], [67.2, 30525.0], [67.3, 30525.0], [67.4, 30577.0], [67.5, 30600.0], [67.6, 30660.0], [67.7, 30660.0], [67.8, 30667.0], [67.9, 30924.0], [68.0, 30924.0], [68.1, 30993.0], [68.2, 31084.0], [68.3, 31177.0], [68.4, 31177.0], [68.5, 31395.0], [68.6, 31614.0], [68.7, 31632.0], [68.8, 31632.0], [68.9, 31764.0], [69.0, 31802.0], [69.1, 31923.0], [69.2, 31923.0], [69.3, 32284.0], [69.4, 32760.0], [69.5, 32931.0], [69.6, 32931.0], [69.7, 32977.0], [69.8, 32994.0], [69.9, 33071.0], [70.0, 33071.0], [70.1, 33160.0], [70.2, 33173.0], [70.3, 33348.0], [70.4, 33348.0], [70.5, 33356.0], [70.6, 33363.0], [70.7, 33395.0], [70.8, 33395.0], [70.9, 33563.0], [71.0, 33707.0], [71.1, 34016.0], [71.2, 34016.0], [71.3, 34020.0], [71.4, 34056.0], [71.5, 34066.0], [71.6, 34066.0], [71.7, 34071.0], [71.8, 34081.0], [71.9, 34567.0], [72.0, 34567.0], [72.1, 34612.0], [72.2, 34631.0], [72.3, 34837.0], [72.4, 34837.0], [72.5, 34839.0], [72.6, 35050.0], [72.7, 35359.0], [72.8, 35359.0], [72.9, 35361.0], [73.0, 35483.0], [73.1, 35503.0], [73.2, 35503.0], [73.3, 35665.0], [73.4, 35838.0], [73.5, 36204.0], [73.6, 36204.0], [73.7, 36569.0], [73.8, 36589.0], [73.9, 36591.0], [74.0, 36591.0], [74.1, 36660.0], [74.2, 36745.0], [74.3, 36754.0], [74.4, 36754.0], [74.5, 36842.0], [74.6, 36933.0], [74.7, 36988.0], [74.8, 36988.0], [74.9, 37298.0], [75.0, 37416.0], [75.1, 37446.0], [75.2, 37446.0], [75.3, 37843.0], [75.4, 38010.0], [75.5, 38077.0], [75.6, 38077.0], [75.7, 38091.0], [75.8, 38147.0], [75.9, 38216.0], [76.0, 38216.0], [76.1, 38599.0], [76.2, 38631.0], [76.3, 38817.0], [76.4, 38817.0], [76.5, 38938.0], [76.6, 39027.0], [76.7, 39150.0], [76.8, 39150.0], [76.9, 39437.0], [77.0, 39441.0], [77.1, 39576.0], [77.2, 39576.0], [77.3, 39886.0], [77.4, 40336.0], [77.5, 40456.0], [77.6, 40456.0], [77.7, 40460.0], [77.8, 40615.0], [77.9, 40815.0], [78.0, 40815.0], [78.1, 41026.0], [78.2, 41031.0], [78.3, 41165.0], [78.4, 41165.0], [78.5, 41272.0], [78.6, 41487.0], [78.7, 41517.0], [78.8, 41517.0], [78.9, 42033.0], [79.0, 42228.0], [79.1, 42249.0], [79.2, 42249.0], [79.3, 42396.0], [79.4, 42600.0], [79.5, 42610.0], [79.6, 42610.0], [79.7, 42787.0], [79.8, 42812.0], [79.9, 43571.0], [80.0, 43571.0], [80.1, 43673.0], [80.2, 43939.0], [80.3, 44122.0], [80.4, 44122.0], [80.5, 44144.0], [80.6, 44159.0], [80.7, 44599.0], [80.8, 44599.0], [80.9, 44754.0], [81.0, 44984.0], [81.1, 45064.0], [81.2, 45064.0], [81.3, 45121.0], [81.4, 45142.0], [81.5, 45349.0], [81.6, 45349.0], [81.7, 46045.0], [81.8, 46128.0], [81.9, 46390.0], [82.0, 46390.0], [82.1, 46559.0], [82.2, 46806.0], [82.3, 47363.0], [82.4, 47363.0], [82.5, 47386.0], [82.6, 47446.0], [82.7, 47631.0], [82.8, 47631.0], [82.9, 47649.0], [83.0, 47832.0], [83.1, 47915.0], [83.2, 47915.0], [83.3, 47977.0], [83.4, 48346.0], [83.5, 48584.0], [83.6, 48584.0], [83.7, 48683.0], [83.8, 48836.0], [83.9, 48927.0], [84.0, 48927.0], [84.1, 49393.0], [84.2, 49587.0], [84.3, 50583.0], [84.4, 50583.0], [84.5, 50697.0], [84.6, 51408.0], [84.7, 51534.0], [84.8, 51534.0], [84.9, 52231.0], [85.0, 52319.0], [85.1, 52354.0], [85.2, 52354.0], [85.3, 52538.0], [85.4, 52551.0], [85.5, 52781.0], [85.6, 52781.0], [85.7, 52998.0], [85.8, 53008.0], [85.9, 53642.0], [86.0, 53642.0], [86.1, 53937.0], [86.2, 54468.0], [86.3, 54985.0], [86.4, 54985.0], [86.5, 55335.0], [86.6, 55338.0], [86.7, 55350.0], [86.8, 55350.0], [86.9, 55860.0], [87.0, 55895.0], [87.1, 56370.0], [87.2, 56370.0], [87.3, 56899.0], [87.4, 58146.0], [87.5, 58268.0], [87.6, 58268.0], [87.7, 58903.0], [87.8, 59054.0], [87.9, 59197.0], [88.0, 59197.0], [88.1, 59316.0], [88.2, 59382.0], [88.3, 59401.0], [88.4, 59401.0], [88.5, 59424.0], [88.6, 59534.0], [88.7, 59584.0], [88.8, 59584.0], [88.9, 59751.0], [89.0, 59986.0], [89.1, 60020.0], [89.2, 60020.0], [89.3, 60214.0], [89.4, 60923.0], [89.5, 61304.0], [89.6, 61304.0], [89.7, 61320.0], [89.8, 61839.0], [89.9, 61984.0], [90.0, 61984.0], [90.1, 62349.0], [90.2, 63080.0], [90.3, 63164.0], [90.4, 63164.0], [90.5, 63383.0], [90.6, 63631.0], [90.7, 64406.0], [90.8, 64406.0], [90.9, 64820.0], [91.0, 65212.0], [91.1, 65517.0], [91.2, 65517.0], [91.3, 66075.0], [91.4, 66318.0], [91.5, 66819.0], [91.6, 66819.0], [91.7, 66883.0], [91.8, 67445.0], [91.9, 67481.0], [92.0, 67481.0], [92.1, 67590.0], [92.2, 67828.0], [92.3, 68699.0], [92.4, 68699.0], [92.5, 68915.0], [92.6, 69480.0], [92.7, 69718.0], [92.8, 69718.0], [92.9, 70004.0], [93.0, 70115.0], [93.1, 70605.0], [93.2, 70605.0], [93.3, 70873.0], [93.4, 70899.0], [93.5, 72813.0], [93.6, 72813.0], [93.7, 73252.0], [93.8, 73318.0], [93.9, 73471.0], [94.0, 73471.0], [94.1, 74519.0], [94.2, 74566.0], [94.3, 74820.0], [94.4, 74820.0], [94.5, 75144.0], [94.6, 76229.0], [94.7, 76802.0], [94.8, 76802.0], [94.9, 77800.0], [95.0, 77817.0], [95.1, 79976.0], [95.2, 79976.0], [95.3, 81035.0], [95.4, 81638.0], [95.5, 81852.0], [95.6, 81852.0], [95.7, 81961.0], [95.8, 83282.0], [95.9, 84503.0], [96.0, 84503.0], [96.1, 85319.0], [96.2, 86681.0], [96.3, 86815.0], [96.4, 86815.0], [96.5, 87284.0], [96.6, 87569.0], [96.7, 87611.0], [96.8, 87611.0], [96.9, 89915.0], [97.0, 90859.0], [97.1, 91674.0], [97.2, 91674.0], [97.3, 91978.0], [97.4, 95377.0], [97.5, 95448.0], [97.6, 95448.0], [97.7, 98000.0], [97.8, 100021.0], [97.9, 100033.0], [98.0, 100033.0], [98.1, 100044.0], [98.2, 100045.0], [98.3, 100049.0], [98.4, 100049.0], [98.5, 100051.0], [98.6, 100062.0], [98.7, 100481.0], [98.8, 100481.0], [98.9, 100490.0], [99.0, 100492.0], [99.1, 100502.0], [99.2, 100502.0], [99.3, 100502.0], [99.4, 100509.0], [99.5, 100615.0], [99.6, 100615.0], [99.7, 100632.0], [99.8, 100684.0], [99.9, 100695.0], [100.0, 100695.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 600.0, "maxY": 16.0, "series": [{"data": [[87500.0, 1.0], [32900.0, 3.0], [33700.0, 1.0], [34500.0, 1.0], [35300.0, 2.0], [36900.0, 2.0], [38500.0, 1.0], [44100.0, 3.0], [44900.0, 1.0], [46500.0, 1.0], [47300.0, 2.0], [48900.0, 1.0], [50500.0, 1.0], [52900.0, 1.0], [55300.0, 3.0], [59300.0, 2.0], [60900.0, 1.0], [63300.0, 1.0], [67400.0, 2.0], [70600.0, 1.0], [81800.0, 1.0], [86600.0, 1.0], [600.0, 2.0], [1000.0, 1.0], [1100.0, 1.0], [1200.0, 1.0], [1300.0, 1.0], [1500.0, 1.0], [1600.0, 1.0], [1700.0, 2.0], [1800.0, 2.0], [1900.0, 4.0], [2100.0, 2.0], [2200.0, 1.0], [2300.0, 1.0], [2400.0, 3.0], [2500.0, 1.0], [2600.0, 1.0], [2700.0, 1.0], [2900.0, 3.0], [3100.0, 1.0], [3300.0, 2.0], [3200.0, 6.0], [3500.0, 1.0], [3700.0, 3.0], [3600.0, 2.0], [3800.0, 3.0], [3900.0, 3.0], [4000.0, 3.0], [4200.0, 13.0], [4300.0, 12.0], [4100.0, 15.0], [4600.0, 2.0], [4400.0, 6.0], [69700.0, 1.0], [4800.0, 3.0], [4700.0, 3.0], [74500.0, 2.0], [4900.0, 1.0], [5000.0, 5.0], [5600.0, 1.0], [5400.0, 1.0], [5500.0, 2.0], [5700.0, 3.0], [6000.0, 1.0], [95300.0, 1.0], [5900.0, 1.0], [6300.0, 2.0], [6500.0, 3.0], [6400.0, 1.0], [6800.0, 1.0], [6900.0, 3.0], [6700.0, 1.0], [7100.0, 3.0], [7300.0, 1.0], [7400.0, 7.0], [7200.0, 3.0], [7600.0, 4.0], [7500.0, 1.0], [7800.0, 7.0], [7900.0, 16.0], [7700.0, 11.0], [8100.0, 3.0], [8000.0, 8.0], [8200.0, 4.0], [8400.0, 6.0], [8600.0, 1.0], [9200.0, 5.0], [9000.0, 1.0], [9600.0, 2.0], [9400.0, 1.0], [10200.0, 1.0], [9800.0, 1.0], [10000.0, 1.0], [10400.0, 2.0], [11000.0, 1.0], [10800.0, 4.0], [11600.0, 4.0], [11400.0, 6.0], [11800.0, 3.0], [12200.0, 1.0], [12000.0, 2.0], [12600.0, 2.0], [12400.0, 4.0], [13000.0, 1.0], [13200.0, 2.0], [12800.0, 1.0], [13800.0, 3.0], [13600.0, 3.0], [13400.0, 1.0], [14200.0, 1.0], [14400.0, 2.0], [15000.0, 3.0], [15200.0, 3.0], [15800.0, 5.0], [15600.0, 2.0], [15400.0, 3.0], [16200.0, 1.0], [16000.0, 1.0], [17200.0, 1.0], [16400.0, 1.0], [18800.0, 2.0], [19200.0, 2.0], [20400.0, 1.0], [19600.0, 1.0], [22400.0, 1.0], [23200.0, 2.0], [22800.0, 1.0], [24400.0, 1.0], [25200.0, 2.0], [26000.0, 1.0], [26400.0, 1.0], [26800.0, 3.0], [27600.0, 1.0], [28000.0, 1.0], [29600.0, 3.0], [28800.0, 2.0], [30000.0, 1.0], [30400.0, 2.0], [31600.0, 2.0], [36800.0, 1.0], [40800.0, 1.0], [48800.0, 1.0], [54400.0, 1.0], [53600.0, 1.0], [56800.0, 1.0], [60000.0, 1.0], [64800.0, 1.0], [76800.0, 1.0], [81600.0, 1.0], [83200.0, 1.0], [75100.0, 1.0], [79900.0, 1.0], [33100.0, 2.0], [35500.0, 1.0], [40300.0, 1.0], [39500.0, 1.0], [41100.0, 1.0], [42700.0, 1.0], [43500.0, 1.0], [45100.0, 2.0], [48300.0, 1.0], [51500.0, 1.0], [52300.0, 2.0], [53900.0, 1.0], [56300.0, 1.0], [59500.0, 2.0], [61900.0, 1.0], [69400.0, 1.0], [67800.0, 1.0], [70100.0, 1.0], [73300.0, 1.0], [84500.0, 1.0], [100500.0, 3.0], [17300.0, 3.0], [16500.0, 2.0], [16900.0, 1.0], [18500.0, 2.0], [18900.0, 1.0], [19700.0, 3.0], [20100.0, 2.0], [21300.0, 1.0], [22500.0, 2.0], [23300.0, 1.0], [24900.0, 1.0], [25300.0, 1.0], [25700.0, 3.0], [26500.0, 1.0], [27700.0, 2.0], [28100.0, 2.0], [28500.0, 2.0], [28900.0, 1.0], [30500.0, 2.0], [29700.0, 1.0], [31700.0, 1.0], [31300.0, 1.0], [30900.0, 2.0], [33000.0, 1.0], [34600.0, 2.0], [35400.0, 1.0], [36200.0, 1.0], [38600.0, 1.0], [37800.0, 1.0], [39400.0, 2.0], [41000.0, 2.0], [42600.0, 2.0], [45000.0, 1.0], [47400.0, 1.0], [50600.0, 1.0], [52200.0, 1.0], [53000.0, 1.0], [51400.0, 1.0], [59400.0, 2.0], [60200.0, 1.0], [61800.0, 1.0], [66000.0, 1.0], [70800.0, 2.0], [86800.0, 1.0], [91600.0, 1.0], [98000.0, 1.0], [67500.0, 1.0], [81900.0, 1.0], [89900.0, 1.0], [33300.0, 4.0], [36500.0, 3.0], [38900.0, 1.0], [38100.0, 1.0], [44500.0, 1.0], [46100.0, 1.0], [45300.0, 1.0], [48500.0, 1.0], [49300.0, 1.0], [52500.0, 2.0], [54900.0, 1.0], [58900.0, 1.0], [58100.0, 1.0], [59700.0, 1.0], [61300.0, 2.0], [77800.0, 2.0], [76200.0, 1.0], [81000.0, 1.0], [95400.0, 1.0], [68900.0, 1.0], [8300.0, 2.0], [8500.0, 4.0], [9100.0, 1.0], [8900.0, 2.0], [9300.0, 2.0], [9500.0, 1.0], [10100.0, 1.0], [9900.0, 1.0], [10700.0, 7.0], [10500.0, 8.0], [10300.0, 2.0], [11100.0, 1.0], [10900.0, 2.0], [11500.0, 4.0], [11300.0, 2.0], [11700.0, 4.0], [12100.0, 1.0], [11900.0, 1.0], [12700.0, 2.0], [12300.0, 4.0], [12500.0, 1.0], [12900.0, 2.0], [13700.0, 1.0], [14100.0, 1.0], [14500.0, 1.0], [15100.0, 7.0], [15300.0, 6.0], [14900.0, 2.0], [15700.0, 1.0], [15900.0, 1.0], [16300.0, 1.0], [17000.0, 1.0], [17800.0, 2.0], [19000.0, 1.0], [18600.0, 4.0], [19400.0, 1.0], [19800.0, 2.0], [20200.0, 4.0], [21400.0, 1.0], [20600.0, 2.0], [21000.0, 1.0], [21800.0, 3.0], [22200.0, 1.0], [23400.0, 1.0], [22600.0, 2.0], [23000.0, 2.0], [24200.0, 1.0], [23800.0, 1.0], [24600.0, 1.0], [26200.0, 1.0], [26600.0, 2.0], [27400.0, 3.0], [29000.0, 1.0], [30600.0, 3.0], [29800.0, 1.0], [30200.0, 2.0], [31000.0, 1.0], [32200.0, 1.0], [31800.0, 1.0], [34000.0, 6.0], [34800.0, 2.0], [35600.0, 1.0], [38000.0, 3.0], [38800.0, 1.0], [37200.0, 1.0], [40400.0, 2.0], [42800.0, 1.0], [42000.0, 1.0], [41200.0, 1.0], [43600.0, 1.0], [46800.0, 1.0], [46000.0, 1.0], [47600.0, 2.0], [65200.0, 1.0], [64400.0, 1.0], [63600.0, 1.0], [72800.0, 1.0], [87200.0, 1.0], [100000.0, 7.0], [66300.0, 1.0], [91900.0, 1.0], [33500.0, 1.0], [36700.0, 2.0], [39100.0, 1.0], [42300.0, 1.0], [41500.0, 1.0], [44700.0, 1.0], [43900.0, 1.0], [46300.0, 1.0], [47900.0, 2.0], [49500.0, 1.0], [52700.0, 1.0], [59100.0, 1.0], [59900.0, 1.0], [62300.0, 1.0], [63100.0, 1.0], [65500.0, 1.0], [68600.0, 1.0], [73400.0, 1.0], [100600.0, 4.0], [85300.0, 1.0], [16700.0, 3.0], [17100.0, 4.0], [17500.0, 2.0], [18700.0, 1.0], [21100.0, 2.0], [21500.0, 1.0], [22300.0, 3.0], [21900.0, 1.0], [23100.0, 4.0], [23500.0, 2.0], [24300.0, 2.0], [23900.0, 1.0], [25100.0, 1.0], [25900.0, 6.0], [26700.0, 2.0], [28300.0, 2.0], [29100.0, 2.0], [28700.0, 1.0], [29900.0, 2.0], [30300.0, 2.0], [31100.0, 1.0], [32700.0, 1.0], [31900.0, 1.0], [35800.0, 1.0], [36600.0, 1.0], [35000.0, 1.0], [37400.0, 2.0], [38200.0, 1.0], [40600.0, 1.0], [39000.0, 1.0], [39800.0, 1.0], [41400.0, 1.0], [42200.0, 2.0], [48600.0, 1.0], [47800.0, 1.0], [55800.0, 2.0], [59000.0, 1.0], [58200.0, 1.0], [63000.0, 1.0], [66800.0, 2.0], [70000.0, 1.0], [73200.0, 1.0], [74800.0, 1.0], [87600.0, 1.0], [90800.0, 1.0], [100400.0, 3.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 100600.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 6.0, "minX": 1.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 728.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 6.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 728.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 16.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 44.980769230769226, "minX": 1.69513326E12, "maxY": 146.58461538461552, "series": [{"data": [[1.69513332E12, 146.58461538461552], [1.69513344E12, 44.980769230769226], [1.69513326E12, 139.8837209302326], [1.69513338E12, 110.33870967741933]], "isOverall": false, "label": "ThreadFoodpanda", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.69513344E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 652.0, "minX": 1.0, "maxY": 76517.0, "series": [{"data": [[2.0, 1007.0], [3.0, 8963.5], [4.0, 2555.5], [5.0, 28327.0], [6.0, 8516.0], [7.0, 21079.0], [8.0, 5711.0], [9.0, 31802.0], [10.0, 30924.0], [11.0, 5039.0], [12.0, 9546.0], [13.0, 19850.5], [14.0, 8517.0], [15.0, 7978.0], [16.0, 5260.0], [17.0, 42249.0], [18.0, 10011.0], [19.0, 30238.0], [20.0, 20141.0], [21.0, 11768.0], [22.0, 13672.0], [23.0, 1863.0], [24.0, 55338.0], [25.0, 1737.0], [26.0, 14235.142857142857], [27.0, 24019.5], [28.0, 13250.0], [29.0, 39437.0], [30.0, 15424.0], [31.0, 30355.0], [33.0, 23896.0], [32.0, 46352.0], [35.0, 8290.0], [34.0, 8259.0], [37.0, 24990.5], [36.0, 21322.0], [39.0, 4418.0], [38.0, 35023.0], [41.0, 1914.0], [40.0, 13921.5], [42.0, 2139.5], [43.0, 21128.0], [45.0, 27776.166666666668], [44.0, 1942.0], [47.0, 37767.833333333336], [46.0, 46268.0], [49.0, 25127.0], [48.0, 16922.333333333332], [50.0, 35398.25000000001], [51.0, 12721.0], [53.0, 10703.0], [52.0, 38010.0], [55.0, 10963.0], [54.0, 34394.5], [57.0, 27453.75], [56.0, 21948.4], [59.0, 19932.4], [58.0, 47446.0], [61.0, 21182.25], [60.0, 9991.0], [63.0, 26333.0], [62.0, 43673.0], [67.0, 43571.0], [66.0, 40442.666666666664], [65.0, 4797.0], [64.0, 39886.0], [71.0, 37778.5], [70.0, 13877.5], [69.0, 32816.16666666667], [68.0, 68915.0], [72.0, 28661.0], [75.0, 41408.2], [74.0, 5715.0], [73.0, 7643.0], [78.0, 31190.333333333336], [79.0, 34837.0], [77.0, 30577.0], [76.0, 30855.5], [83.0, 8094.0], [82.0, 10725.0], [81.0, 52319.0], [80.0, 19532.5], [87.0, 36262.0], [86.0, 35030.333333333336], [85.0, 38356.5], [84.0, 22394.142857142855], [91.0, 24491.833333333332], [90.0, 47265.0], [89.0, 46951.0], [88.0, 7094.0], [93.0, 37809.11111111111], [95.0, 4785.5], [94.0, 29100.25], [92.0, 27681.0], [97.0, 35879.125], [99.0, 31703.0], [98.0, 33081.16666666667], [96.0, 27988.75], [103.0, 21923.25], [102.0, 3656.0], [101.0, 38209.00000000001], [100.0, 23483.8], [107.0, 35163.0], [106.0, 28303.75], [105.0, 7106.0], [104.0, 12241.0], [109.0, 6897.0], [111.0, 24586.75], [110.0, 15965.0], [108.0, 37453.0], [112.0, 26943.875], [115.0, 10488.0], [114.0, 74137.57142857143], [113.0, 45621.142857142855], [117.0, 22853.333333333336], [119.0, 56370.0], [118.0, 39918.0], [116.0, 48246.74999999999], [123.0, 31104.666666666668], [122.0, 7474.0], [121.0, 76517.0], [120.0, 33563.0], [127.0, 34504.4], [126.0, 45725.307692307695], [125.0, 7475.0], [124.0, 39692.0], [129.0, 16382.0], [135.0, 50420.5], [134.0, 26464.999999999996], [133.0, 28987.0], [132.0, 4365.0], [131.0, 22122.666666666668], [130.0, 28416.375], [128.0, 44285.333333333336], [136.0, 30509.000000000004], [142.0, 26396.333333333336], [143.0, 11965.5], [141.0, 46303.99999999999], [140.0, 15860.0], [139.0, 40774.57142857143], [138.0, 30436.0], [137.0, 42718.38461538462], [146.0, 8005.2], [150.0, 16582.43055555555], [149.0, 10346.333333333334], [148.0, 20837.812499999996], [147.0, 33779.0], [145.0, 22176.5], [144.0, 15459.8], [1.0, 652.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[112.69733333333339, 26535.105333333337]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 150.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 170.56666666666666, "minX": 1.69513326E12, "maxY": 264615.0, "series": [{"data": [[1.69513332E12, 264615.0], [1.69513344E12, 154735.86666666667], [1.69513326E12, 87526.6], [1.69513338E12, 240302.6]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.69513332E12, 515.6666666666666], [1.69513344E12, 309.4], [1.69513326E12, 170.56666666666666], [1.69513338E12, 491.8666666666667]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.69513344E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 6881.488372093023, "minX": 1.69513326E12, "maxY": 34913.661290322605, "series": [{"data": [[1.69513332E12, 25736.600000000017], [1.69513344E12, 25380.878205128203], [1.69513326E12, 6881.488372093023], [1.69513338E12, 34913.661290322605]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.69513344E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 6826.546511627908, "minX": 1.69513326E12, "maxY": 34848.749999999985, "series": [{"data": [[1.69513332E12, 25658.142307692306], [1.69513344E12, 25338.307692307702], [1.69513326E12, 6826.546511627908], [1.69513338E12, 34848.749999999985]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.69513344E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 8.942307692307693, "minX": 1.69513326E12, "maxY": 86.16279069767447, "series": [{"data": [[1.69513332E12, 20.63846153846154], [1.69513344E12, 8.942307692307693], [1.69513326E12, 86.16279069767447], [1.69513338E12, 48.83870967741935]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.69513344E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 605.0, "minX": 1.69513326E12, "maxY": 100684.0, "series": [{"data": [[1.69513332E12, 77800.0], [1.69513344E12, 98000.0], [1.69513326E12, 17514.0], [1.69513338E12, 100684.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.69513332E12, 4145.0], [1.69513344E12, 605.0], [1.69513326E12, 1117.0], [1.69513338E12, 3208.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.69513332E12, 59363.5], [1.69513344E12, 53255.60000000002], [1.69513326E12, 13097.3], [1.69513338E12, 69270.80000000002]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.69513332E12, 74770.08999999995], [1.69513344E12, 92320.51999999999], [1.69513326E12, 17514.0], [1.69513338E12, 95421.73]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.69513332E12, 19813.0], [1.69513344E12, 16834.0], [1.69513326E12, 5344.0], [1.69513338E12, 24796.5]], "isOverall": false, "label": "Median", "isController": false}, {"data": [[1.69513332E12, 66879.8], [1.69513344E12, 68053.74999999999], [1.69513326E12, 15654.049999999996], [1.69513338E12, 85523.29999999997]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.69513344E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 9296.0, "minX": 1.0, "maxY": 100655.0, "series": [{"data": [[4.0, 22147.5], [2.0, 17761.5], [1.0, 9296.0], [8.0, 32977.0], [5.0, 15173.0], [3.0, 17039.5], [6.0, 12338.5]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[8.0, 100502.0], [4.0, 100655.0], [5.0, 100049.0], [6.0, 100266.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 8.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 9290.5, "minX": 1.0, "maxY": 100655.0, "series": [{"data": [[4.0, 22133.0], [2.0, 17756.5], [1.0, 9290.5], [8.0, 32969.0], [5.0, 15132.0], [3.0, 17033.0], [6.0, 12331.5]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[8.0, 100502.0], [4.0, 100655.0], [5.0, 100049.0], [6.0, 100266.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 8.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 1.3, "minX": 1.69513326E12, "maxY": 4.1, "series": [{"data": [[1.69513332E12, 4.1], [1.69513344E12, 1.3], [1.69513326E12, 3.933333333333333], [1.69513338E12, 3.1666666666666665]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.69513344E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.06666666666666667, "minX": 1.69513326E12, "maxY": 4.333333333333333, "series": [{"data": [[1.69513332E12, 4.333333333333333], [1.69513344E12, 2.533333333333333], [1.69513326E12, 1.4333333333333333], [1.69513338E12, 3.933333333333333]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.69513344E12, 0.06666666666666667], [1.69513338E12, 0.2]], "isOverall": false, "label": "524", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.69513344E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.06666666666666667, "minX": 1.69513326E12, "maxY": 4.333333333333333, "series": [{"data": [[1.69513332E12, 4.333333333333333], [1.69513344E12, 2.533333333333333], [1.69513326E12, 1.4333333333333333], [1.69513338E12, 3.933333333333333]], "isOverall": false, "label": "HTTP Request-success", "isController": false}, {"data": [[1.69513344E12, 0.06666666666666667], [1.69513338E12, 0.2]], "isOverall": false, "label": "HTTP Request-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.69513344E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.06666666666666667, "minX": 1.69513326E12, "maxY": 4.333333333333333, "series": [{"data": [[1.69513332E12, 4.333333333333333], [1.69513344E12, 2.533333333333333], [1.69513326E12, 1.4333333333333333], [1.69513338E12, 3.933333333333333]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.69513344E12, 0.06666666666666667], [1.69513338E12, 0.2]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.69513344E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

